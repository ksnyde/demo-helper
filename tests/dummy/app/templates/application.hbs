{{#app-page
  repo='demo-helper'
  repoOwner='ksnyde'
  subHeading='Helper components when building addons'
}}

{{#if notIndexPage}}
    {{#link-to 'index'}}
    <div class="back-navigation">
        {{ui-icon 'arrow-circle-left' size='5x' class='animated fadeIn'}}
    </div>
    {{/link-to}}
{{/if}}


<h3>demo-css</h3>
<row>
  <widget>
    <i>not applicable</i>
  </widget>
  <code>
    {{#display-component componentName='demo-css'}}
      Your content goes here<br/>
    {{/display-component}}
  </code>
  <description>
    By surrounding your content with the <prop>demo-css</prop> component you are able to take advantage of reusable CSS that is intended for building the dummy apps of addons.
  </description>
</row>
<h3>display-component</h3>
<row>
  <widget>
    <span style='font-family: "Courier New", Courier, monospace;'>
      {{display-component props='props' test=test componentName='display-component' as='foobar'}}
    </span>
  </widget>
  <code>
    \{{display-component<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;componentName='display-component'<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;as='foobar'<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;props='props'<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;test=test<br/>
    }}
  </code>
  <description>
    <p>This one is a bit reflexive. The goal is to provide a very simple signature to document a component's call while keeping the bound values active. The 'test' parameter can be toggled here between apple and orange to start to get a sense for how it works.
      <br/>
      {{ui-toggle-button on='apple' onValue='apple' off='orange' offValue='orange' value=test}}</p>
      <p><b>Note</b>: there is also a <prop>_indent</prop> property that can be used to indent block scope; there is also a <prop>_dim</prop> boolean property which can dim a particular component.</p>
  </description>
</row>
<row>
  <widget>
    {{js myFunction}}
  </widget>
  <code>
    \{{js myFunction}}
  </code>
  <description>
    The <prop>js</prop> helper allows prism to present a JS function to the UI
  </description>
</row>

<row>
  <widget>
    {{json myJson}}
  </widget>
  <code>
    \{{json myJson}}
  </code>
  <description>
    The <prop>json</prop> helper allows prism to present a JSON data structure to the UI
  </description>
</row>



<code>
{{#display-component props='props' test=test componentName='display-component' as='foobar' as |g|}}
  {{display-component componentName='fictional-thing' _indent=1 _container=g foo=bar bar='baz'}}
  {{display-component componentName='fictional-thing' _indent=1 _container=g bar=':baz'}}
{{/display-component}}
<br/>
{{#display-component componentName='display-component' as='foobar' as |g|}}
  {{display-component componentName='fictional-thing' _indent=1 _container=g foo=bar bar='baz'}}
  {{display-component componentName='fictional-thing' _indent=1 _container=g bar=':baz'}}
{{/display-component}}
</code>
{{/app-page}}
